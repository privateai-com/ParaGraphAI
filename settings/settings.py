"""
Django settings for settings project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-e9sr8e9m42oamye&n-cqg&kjr^)70k^e2f0uatlhy!i&t=y#8w')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_APPS = [
    'rest_framework',
    'channels',
    'django_celery_results', # Для хранения результатов задач в БД
    'django_celery_beat',    # Для периодических задач
    'adminsortable2',
]

CUSTOM_APPS = [
    'applications.article.apps.ArticleConfig',
]

# django_cleanup should be placed last in INSTALLED_APPS.
INSTALLED_APPS = ['daphne'] + DJANGO_APPS + THIRD_APPS + CUSTOM_APPS + ['django_cleanup.apps.CleanupConfig']


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'settings.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'settings.wsgi.application' # Это для обычных HTTP запросов
ASGI_APPLICATION = 'settings.asgi.application' # Это для Channels


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
   'default': {
       'ENGINE': 'django.db.backends.postgresql',
       'NAME': 'article',
       'USER': 'article',
       'PASSWORD': 'article',
       'HOST': '127.0.0.1',
       'PORT': '5432',
   }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LOGIN_REDIRECT_URL = 'submit_article'  # Имя URL-маршрута, куда перенаправлять после входа


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# STATICFILES_DIRS = [BASE_DIR / "static"] # Общая папка для статики уровня проекта

MEDIA_URL = 'media/'
# MEDIA_ROOT = BASE_DIR / 'media' # для pathlib:
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

if DEBUG:
    # STATICFILES_DIRS = (os.path.join(BASE_DIR, 'frontend'),) # здесь collectstatic также будет искать файлы
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')         # сюда collectstatic поместит найденные файлы
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    # MEDIA_URL = 'media/'
else:
    STATIC_ROOT = os.getenv('DJANGO_STATIC_ROOT')
    STATICFILES_DIRS = [BASE_DIR / 'static']


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# The maximum number of parameters that may be received via GET or POST before a SuspiciousOperation (TooManyFields) is raised. You can set this to None to disable the check.
DATA_UPLOAD_MAX_NUMBER_FIELDS = None # Чтобы в админке можно было удалять сразу все поля (по умолчанию только 1000)

# DRF
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly', # По умолчанию - чтение всем, запись авторизованным
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}


# --- Celery Configuration Options ---
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # URL брокера сообщений (Redis)
CELERY_RESULT_BACKEND = 'django-db' # django-celery-results для хранения результатов в БД ('redis://localhost:6379/1' или 'django-db')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Kiev' # часовой пояс
CELERY_TASK_TRACK_STARTED = True # Чтобы задачи отображали состояние "STARTED"
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler' # Для django-celery-beat


# --- Channel Layers Configuration ---
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('localhost', 6379)], # Адрес Redis сервера
        },
    },
}


APP_EMAIL = os.getenv('SECRET_APP_EMAIL', 'example@mail.com')
NCBI_API_KEY = os.getenv('SECRET_NCBI_API_KEY', '') # PubMed


OPENAI_API_KEY = os.getenv('SECRET_OPENAI_API_KEY', '')
OPENAI_DEFAULT_MODEL = "gpt-4o-mini"
# LLM_PROVIDER_FOR_ANALYSIS = 'OpenAI' # 'Grok'
LLM_PROVIDER_FOR_ANALYSIS = 'OpenAI' if os.getenv('SECRET_OPENAI_API_KEY', '') else 'Grok'


API_SOURCE_NAMES = {
    'CROSSREF': 'crossref_api',
    'PUBMED': 'pubmed_api',
    'EUROPEPMC': 'europepmc_api',
    'RXIV': 'rxiv_api',           # (общее для bioRxiv/medRxiv)
    'SCIHUB': 'sci_hub',
    'SEMANTICSCHOLAR': 'semanticscholar_api',
    'ARXIV': 'arxiv_api',
    'OPENALEX': 'openalex_api',
    'UNPAYWALL': 'unpaywall_api', # Unpaywall дополняет, а не предоставляет основные метаданные
}


try:
    from .local_settings import *
except ImportError:
    pass
